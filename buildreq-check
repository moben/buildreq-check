#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# process-simple-patch.py
#
# This script automates most of the tasks for processing Simple Patch Requests
#   See the Simple Patch Policy at
#       https://fedoraproject.org/wiki/Policy_for_simple_patches#Simple_Patch_Policy
#
# Copyright (C) 2014 Benedikt Morbach
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

from __future__ import print_function
from __future__ import unicode_literals
from future_builtins import map, filter
from functools import reduce

# cmp
import magic

# cmp_zip
import zipfile

# cmp_gzip
import gzip

# cmp_html
try:
    import HTMLParser
except ImportError:
    import html.parser as HTMLParser

import argparse
import glob
import hashlib
from itertools import chain, combinations
try:
    from itertools import zip_longest
except ImportError:
    from itertools import izip_longest as zip_longest
import logging
import operator
import os
import os.path
import re
import rpm
import shutil
import subprocess
import sys
import tempfile

#NOTE not sure if it is good practice to do this at global scope?
logger = logging.getLogger('buildreq-check')

def joinit(iterable, delimiter):
    it = iter(iterable)
    yield next(it)
    for x in it:
        yield delimiter
        yield x


def concat(lst):
    return reduce(lambda a, b: a + b, lst, '')


def sep_print(lst, sep):
    return concat(joinit(lst, sep))


class MockError(Exception):
    pass


class UnpackError(Exception):
    pass


class Rpm(object):
    is_source = False

    def __init__(self, name):
        self.name = name

        ts = rpm.ts()
        ts._vsflags += rpm._RPMVSF_NOSIGNATURES
        fd = os.open(self.name, os.O_RDONLY)
        self.header = ts.hdrFromFdno(fd)
        os.close(fd)

    def extract(self, workdir, filenames=None):
        if not os.path.isdir(workdir):
            os.mkdir(workdir)

        with tempfile.NamedTemporaryFile() as patternfile:
            patterns = ['.' + f for f in filenames] if filenames else ['*']
            for f in patterns:
                patternfile.write(f + '\n')
            patternfile.flush()

            rc = subprocess.Popen(['rpm2cpio', self.name],stdout=subprocess.PIPE)
            cs = subprocess.Popen(['cpio', '--quiet', '--extract', '--make-directories', '--no-absolute-filenames',
                                           '--unconditional', '--pattern-file', patternfile.name],
                    cwd=workdir, stdin=rc.stdout, stdout=subprocess.PIPE, stderr=open(os.devnull, 'w'))

            cs.communicate()

            if rc.returncode or cs.returncode:
                raise UnpackError('failed to extract rpm')
            if filenames:
                missing = list(filter(lambda x: not os.path.lexists(os.path.join(workdir, x)), patterns))
                if missing:
                    raise UnpackError('failed to extract rpm: requested file missing: %s' % sep_print(missing, ', '))

    def __ne__(self, other):
        return not (self == other)

    def __eq__(self, other):
        rpm_tags = frozenset((
            'RPMTAG_ARCH',
            'RPMTAG_ARCHIVESIZE',
            'RPMTAG_BUGURL',
            'RPMTAG_BUILDARCHS',
            'RPMTAG_BUILDHOST',
            'RPMTAG_BUILDTIME',
            'RPMTAG_CHANGELOGNAME',
            'RPMTAG_CHANGELOGTEXT',
            'RPMTAG_CHANGELOGTIME',
            'RPMTAG_CLASSDICT',
            'RPMTAG_CONFLICTFLAGS',
            'RPMTAG_CONFLICTNAME',
            'RPMTAG_CONFLICTNEVRS',
            'RPMTAG_CONFLICTS',
            'RPMTAG_CONFLICTVERSION',
            'RPMTAG_COOKIE',
            'RPMTAG_DBINSTANCE',
            'RPMTAG_DEPENDSDICT',
            'RPMTAG_DESCRIPTION',
            'RPMTAG_DISTRIBUTION',
            'RPMTAG_DISTTAG',
            'RPMTAG_DISTURL',
            'RPMTAG_DSAHEADER',
            'RPMTAG_EPOCH',
            'RPMTAG_EPOCHNUM',
            'RPMTAG_EVR',
            'RPMTAG_EXCLUDEARCH',
            'RPMTAG_EXCLUDEOS',
            'RPMTAG_EXCLUSIVEARCH',
            'RPMTAG_EXCLUSIVEOS',
            'RPMTAG_FILEDIGESTALGO',
            'RPMTAG_FSCONTEXTS',
            'RPMTAG_GIF',
            'RPMTAG_GROUP',
            'RPMTAG_HDRID',
            'RPMTAG_HEADERCOLOR',
            'RPMTAG_HEADERI18NTABLE',
            'RPMTAG_HEADERIMAGE',
            'RPMTAG_HEADERIMMUTABLE',
            'RPMTAG_HEADERREGIONS',
            'RPMTAG_HEADERSIGNATURES',
            'RPMTAG_ICON',
            'RPMTAG_INSTALLCOLOR',
            'RPMTAG_INSTALLTID',
            'RPMTAG_INSTALLTIME',
            'RPMTAG_INSTFILENAMES',
            'RPMTAG_INSTPREFIXES',
            'RPMTAG_LICENSE',
            'RPMTAG_LONGARCHIVESIZE',
            'RPMTAG_LONGSIGSIZE',
            'RPMTAG_LONGSIZE',
            'RPMTAG_NAME',
            'RPMTAG_NEVR',
            'RPMTAG_NEVRA',
            'RPMTAG_NOPATCH',
            'RPMTAG_NOSOURCE',
            'RPMTAG_NOT_FOUND',
            'RPMTAG_NVR',
            'RPMTAG_NVRA',
            'RPMTAG_OBSOLETEFLAGS',
            'RPMTAG_OBSOLETENAME',
            'RPMTAG_OBSOLETENEVRS',
            'RPMTAG_OBSOLETES',
            'RPMTAG_OBSOLETEVERSION',
            'RPMTAG_OLDFILENAMES',
            'RPMTAG_OPTFLAGS',
            'RPMTAG_ORDERFLAGS',
            'RPMTAG_ORDERNAME',
            'RPMTAG_ORDERVERSION',
            'RPMTAG_ORIGBASENAMES',
            'RPMTAG_ORIGDIRINDEXES',
            'RPMTAG_ORIGDIRNAMES',
            'RPMTAG_ORIGFILENAMES',
            'RPMTAG_OS',
            'RPMTAG_PACKAGER',
            'RPMTAG_PATCH',
            'RPMTAG_PATCHESFLAGS',
            'RPMTAG_PATCHESNAME',
            'RPMTAG_PATCHESVERSION',
            'RPMTAG_PAYLOADCOMPRESSOR',
            'RPMTAG_PAYLOADFLAGS',
            'RPMTAG_PAYLOADFORMAT',
            'RPMTAG_PKGID',
            'RPMTAG_PLATFORM',
            'RPMTAG_POLICIES',
            'RPMTAG_POLICYFLAGS',
            'RPMTAG_POLICYNAMES',
            'RPMTAG_POLICYTYPES',
            'RPMTAG_POLICYTYPESINDEXES',
            'RPMTAG_POSTIN',
            'RPMTAG_POSTINFLAGS',
            'RPMTAG_POSTINPROG',
            'RPMTAG_POSTTRANS',
            'RPMTAG_POSTTRANSFLAGS',
            'RPMTAG_POSTTRANSPROG',
            'RPMTAG_POSTUN',
            'RPMTAG_POSTUNFLAGS',
            'RPMTAG_POSTUNPROG',
            'RPMTAG_PREFIXES',
            'RPMTAG_PREIN',
            'RPMTAG_PREINFLAGS',
            'RPMTAG_PREINPROG',
            'RPMTAG_PRETRANS',
            'RPMTAG_PRETRANSFLAGS',
            'RPMTAG_PRETRANSPROG',
            'RPMTAG_PREUN',
            'RPMTAG_PREUNFLAGS',
            'RPMTAG_PREUNPROG',
            'RPMTAG_PROVIDEFLAGS',
            'RPMTAG_PROVIDENAME',
            'RPMTAG_PROVIDENEVRS',
            'RPMTAG_PROVIDES',
            'RPMTAG_PROVIDEVERSION',
            'RPMTAG_PUBKEYS',
            'RPMTAG_RECONTEXTS',
            'RPMTAG_RELEASE',
            'RPMTAG_REMOVETID',
            'RPMTAG_REQUIREFLAGS',
            'RPMTAG_REQUIRENAME',
            'RPMTAG_REQUIRENEVRS',
            'RPMTAG_REQUIRES',
            'RPMTAG_REQUIREVERSION',
            'RPMTAG_RPMVERSION',
            'RPMTAG_RSAHEADER',
            'RPMTAG_SIGGPG',
            'RPMTAG_SIGPGP',
            'RPMTAG_SIGSIZE',
            'RPMTAG_SIGSIZE',
            'RPMTAG_SIZE',
            'RPMTAG_SOURCE',
            'RPMTAG_SOURCEPACKAGE',
            'RPMTAG_SOURCEPKGID',
            'RPMTAG_SOURCERPM',
            'RPMTAG_SUMMARY',
            'RPMTAG_TRIGGERCONDS',
            'RPMTAG_TRIGGERFLAGS',
            'RPMTAG_TRIGGERINDEX',
            'RPMTAG_TRIGGERNAME',
            'RPMTAG_TRIGGERSCRIPTFLAGS',
            'RPMTAG_TRIGGERSCRIPTPROG',
            'RPMTAG_TRIGGERSCRIPTS',
            'RPMTAG_TRIGGERTYPE',
            'RPMTAG_TRIGGERVERSION',
            'RPMTAG_URL',
            'RPMTAG_VCS',
            'RPMTAG_VENDOR',
            'RPMTAG_VERBOSE',
            'RPMTAG_VERIFYSCRIPT',
            'RPMTAG_VERIFYSCRIPTFLAGS',
            'RPMTAG_VERIFYSCRIPTPROG',
            'RPMTAG_VERSION',
            'RPMTAG_XPM',
            ))


        # skip filetype and all sizes as we do our own content-aware comparison later
        # skip basenames, dirnames, dirindexes as we compare full filenames anyway
        skipped_tags = frozenset((
            'RPMTAG_ARCHIVESIZE',
            'RPMTAG_BASENAMES',
            'RPMTAG_BUILDTIME',
            'RPMTAG_CLASSDICT',
            'RPMTAG_DIRINDEXES',
            'RPMTAG_DIRNAMES',
            'RPMTAG_FILECLASS',
            'RPMTAG_FILEMTIMES',
            'RPMTAG_FILEINODES',
            'RPMTAG_HDRID',
            'RPMTAG_HEADERIMMUTABLE',
            'RPMTAG_LONGARCHIVESIZE',
            'RPMTAG_LONGSIGSIZE',
            'RPMTAG_LONGSIZE',
            'RPMTAG_NOT_FOUND',
            'RPMTAG_PKGID',
            'RPMTAG_SIGSIZE',
            'RPMTAG_SIZE'
            ))

        # filename first, rest doesn't matter
        file_tags = (
            'RPMTAG_FILENAMES',
            'RPMTAG_FILECAPS',
            'RPMTAG_FILECLASS',
            'RPMTAG_FILECOLORS',
            'RPMTAG_FILECONTEXTS',
            'RPMTAG_FILEDEPENDSN',
            'RPMTAG_FILEDEPENDSX',
            'RPMTAG_FILEDEVICES',
            'RPMTAG_FILEDIGESTS',
            'RPMTAG_FILEFLAGS',
            'RPMTAG_FILEGROUPNAME',
            'RPMTAG_FILELANGS',
            'RPMTAG_FILELINKTOS',
            'RPMTAG_FILEMODES',
            'RPMTAG_FILENLINKS',
            'RPMTAG_FILEPROVIDE',
            'RPMTAG_FILERDEVS',
            'RPMTAG_FILEREQUIRE',
            'RPMTAG_FILESIZES',
            'RPMTAG_FILESTATES',
            'RPMTAG_FILEUSERNAME',
            'RPMTAG_FILEVERIFYFLAGS',
            'RPMTAG_LONGFILESIZES',
            )

        ignored_files = frozenset(map(re.compile, (
            '^/usr/lib/debug/.build-id',
            '/usr/src/debug/gcc-.*/obj-x86_64-redhat-linux/gcc/cc1(|obj|plus|objplus)-checksum.c',
            )))

        ret = True

        logger.debug('comparing rpms %s and %s', self.name, other.name)

        differing_tags = set()
        differing_files = set()

        # TODO make this short-circuit when a difference is found
        for tag in rpm_tags - skipped_tags:
            if self.header[getattr(rpm, tag)] != other.header[getattr(rpm, tag)]:
                differing_tags.add(tag)
                ret = False

        filetuples = map(lambda hdr: zip_longest(*(hdr[getattr(rpm, tag)] for tag in file_tags)), (self.header, other.header))
        self_dict, other_dict = map(lambda l: { f[0]: f[1:] for f in l if not any(regex.search(f[0]) for regex in ignored_files) }, filetuples)

        differing_files = set(self_dict.keys()) ^ set(other_dict.keys())

        compare_content = set(f for f in self_dict if not f in differing_files and self_dict[f] != other_dict[f])

        if compare_content:
            differing_files.update(self.cmp_contents(other, compare_content))

        if differing_files:
            ret = False

        if not ret:
            logger.info('differing rpm header tags: %s', sep_print(differing_tags, ', '))
            logger.info('differing rpm contents: %s', sep_print(differing_files, ', '))
        return ret


    # assumes file lists were already checked for equality
    def cmp_contents(self, other, filenames):
        differing = []
        self_tree, other_tree = self.name + '.contents', other.name + '.contents'

        self.extract(self_tree, filenames)
        other.extract(other_tree, filenames)

        for filename, file1, file2 in zip(filenames, *map(lambda t: map(lambda f: Content(t, f), filenames) , (self_tree, other_tree))):
            if file1 != file2:
                differing += [ filename ]

        return differing


class Srpm(Rpm):
    is_source = True


class Content(object):
    ms = magic.open(magic.MAGIC_NO_CHECK_ELF)
    ms.load()

    def __init__(self, prefix, path):
        self.prefix = prefix
        self.path = path
        self.name = os.path.join(self.prefix, self.path.lstrip('/'))
        self.filetype = self.ms.file(self.name)

        comparators = map(lambda (regex, func, quirkname): (re.compile(regex), func, quirkname), (
            ('ELF',                     self.__cmp_elf,     'elf'),
            ('G-IR binary database,',   self.__cmp_typelib, 'typelib'),
            ('HTML document',           self.__cmp_html,    'javadoc'),
            ('python .* byte-compiled', self.__cmp_python,  'python'),
            ('Zip archive data',        self.__cmp_zip,     'zip/jar'),
            ('gzip compressed data',    self.__cmp_gzip,    'gzip'),
        ))

        for regex, func, quirkname in comparators:
            if regex.search(self.filetype):
                self.cmp = func
                self.quirk = quirkname
                break
        else:
            logger.warning('Unknown filetype "%s" for file %s, will be treated as different from every file', self.filetype, self.name)
            self.filetype = self.cmp = self.quirk = None

    def __ne__(self, other):
        return not (self == other)

    def __eq__(self, other):
        if not (self.filetype and other.filetype):
            logger.warning('unhandled filetype ("%s" or "%s") for %s', self.filetype, other.filetype, self.path)
            return False
        if self.filetype != other.filetype:
            logger.warning('filetype mismatch ("%s" vs "%s") for %s', self.filetype, other.filetype, self.path)
            return False

        logger.info('Using "%s" quirk for file %s', self.quirk, self.path)
        return self.cmp(other)

    def __cmp_python(self, other):
        with open(self.name, 'rb') as f1, open(other.name, 'rb') as f2:
            # 4 byte magic, 4 byte timestamp. skip the timestamp
            # can't use dis.dis, as we might be a different python version
            return f1.read()[8:] == f2.read()[8:]


    def __cmp_elf(self, other):
        try:
            dump1 = subprocess.check_output(['objdump', '-d', self.name], universal_newlines=True).partition(self.name)[2]
            dump2 = subprocess.check_output(['objdump', '-d', other.name], universal_newlines=True).partition(other.name)[2]
            return dump1 == dump2
        except subprocess.CalledProcessError as e:
            raise Exception('%s failed with %s\nIs this really an ELF file?', e.cmd, e.output)


    def __cmp_typelib(self, other):
        try:
            gir1 = subprocess.check_output(['g-ir-generate', '--all', self.name], universal_newlines=True)
            gir2 = subprocess.check_output(['g-ir-generate', '--all', other.name], universal_newlines=True)
            return gir1 == gir2
        except subprocess.CalledProcessError as e:
            raise Exception('%s failed with %s\nIs this really a typelib file?', e.cmd, e.output)


    def __cmp_zip(self, other):
        with zipfile.ZipFile(self.name, 'r', allowZip64=True) as zip1, zipfile.ZipFile(other.name, 'r', allowZip64=True) as zip2:

            namelist1, namelist2 = frozenset(zip1.namelist()), frozenset(zip2.namelist())
            if namelist1 ^ namelist2:
                return False
            for name in namelist1:
                if zip1.read(name) != zip2.read(name):
                    return False

        return True


    def __cmp_gzip(self, other):
        return gzip.open(self.name, 'rb').read() == gzip.open(other.name, 'rb').read()


    def __cmp_html(self, other):
        p1 = HTMLWithoutComments(self.name)
        p2 = HTMLWithoutComments(other.name)

        return p1.parsed == p2.parsed



# record everything except comments as that is where timestamps are stored. compare the rest
class HTMLWithoutComments(HTMLParser.HTMLParser):
    def __init__(self, filename):
        HTMLParser.HTMLParser.__init__(self)
        self.parsed = []
        with open(filename) as f:
            self.feed(f.read())
    def handle(self, *args):
        self.parsed.append(tuple(args))
    handle_starttag = handle
    handle_endtag = handle
    handle_data = handle
    handle_entityref = handle
    handle_charref = handle
    handle_decl = handle
    handle_pi = handle
    unknown_decl = handle


class Spec(object):
    def __init__(self, name, sourcedir):
        self.name = name
        self.sourcedir = sourcedir
        rpm.addMacro('_sourcedir', self.sourcedir)
        spkg = rpm.spec(self.name)
        self.buildrequires = frozenset(spkg.sourceHeader[rpm.RPMTAG_REQUIRENEVRS])

    def rewrite(self, new_name, excludes):
        with open(self.name) as oldfile, open(new_name, 'w') as newfile:
            for req in self.buildrequires - excludes:
                newfile.write('BuildRequires: %s\n' % req)

            pattern = re.compile('^(|%\S+)BuildRequires\s*:.*$', re.IGNORECASE)
            for line in oldfile.read().splitlines():
                if pattern.match(line) == None:
                    newfile.write(line)
                    newfile.write('\n')

            newfile.flush()

        return Spec(new_name, self.sourcedir)


class Chroot(object):
    # TODO: set yum update to False once yum handles the cache vs. local repo issue
    # (or mock uses dnf, which doesn't have the bug)
    yum_update_default = True

    def __init__(self, root=None, postfix=None):
        self.postfix = postfix
        self.root = root

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.run_mock(['--clean'])
        self.run_mock(['--orphanskill'])

    def run_mock(self, args, yum_update=yum_update_default):
        mock_args = ['mock']

        if not yum_update:
            mock_args += ['--offline']
        if self.root:
            mock_args += ['--root', self.root]
        if self.postfix:
            mock_args += ['--uniqueext', self.postfix]

        mock_args += args

        try:
            logger.debug('running: %s', sep_print(mock_args, ' '))
            # universal newlines to get unicode strings instead of byte strings for python3 compatibility
            p = subprocess.Popen(mock_args, universal_newlines=True,
                    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

#        for line in p.stdout:
#            logger.debug('mock: ' + line.rstrip('\n'))

            p.wait()

            if not p.returncode:
                return True
        except subprocess.CalledProcessError:
            pass

        raise MockError(' '.join(['Build failed:'] + mock_args))

    def build_rpms(self, srpm, resultdir, yum_update=yum_update_default, clean=True):
        if not srpm.is_source:
            raise TypeError('Not a source rpm: %s', srpm.name)

        args = ['--rebuild', srpm.name,
                '--resultdir', resultdir]

        if not clean:
            args += ['--no-clean']

        self.run_mock(args, yum_update)

    def build_srpm(self, spec, resultdir, yum_update=yum_update_default, clean=True):
        args = ['--buildsrpm',
                '--spec', spec.name,
                '--sources', spec.sourcedir,
                '--resultdir', resultdir]

        if not clean:
            args += ['--no-clean']

        if self.run_mock(args, yum_update):
            # there should only be one
            srpm = glob.glob(resultdir + '/*.src.rpm')
            return Srpm(srpm[0])



def get_buildid(pkgset):
    m = hashlib.sha1()
    m.update(repr(pkgset))
    return m.hexdigest()[:7]


def powerset(seq):
    """
    Returns all the subsets of this set, except for the empty set. This is a generator.
    """
    return map(frozenset, chain.from_iterable(combinations(seq, r) for r in range(1, len(seq)+1)))


def rpm_cmp_dir(olddir, newdir):
    ret = True
    rpms = (Rpm(r) for r in glob.glob(olddir + '/*.rpm'))
    for rpm in rpms:
        if rpm.name.endswith('.src.rpm'):
            continue

        newrpm = Rpm(os.path.join(newdir, os.path.basename(rpm.name)))
        if rpm != newrpm:
            logger.info('rpms %s and %s differ', rpm.name, newrpm.name)
            ret = False

    return ret


def find_unneeded_buildreqs(chroot, spec, workdir):
    breaking = set()

    for combination in powerset(spec.buildrequires):
        if any(b < combination for b in breaking):
            # assume that leaving out more deps won't fix an already failing build.
            # might not be true in general, but is a pretty safe bet for unneeded deps, I think
            # TODO? make this configurable?
            breaking.add(combination)
            continue

        build_id = get_buildid(combination)
        build_name = os.path.basename(spec.name)[:-5] + '-buildreq-check-' + build_id

        resultdir = os.path.join(workdir, build_name + '-results')

        testspec_name = os.path.join(workdir, build_name + '.spec')
        testspec = spec.rewrite(testspec_name, combination)

        logger.info('trying build without: %s', sep_print(combination, ', '))
        logger.debug('result directory: %s', resultdir)

        try:
            srpm = chroot.build_srpm(testspec, resultdir)
        except MockError:
            breaking.add(combination)
            continue
        finally:
            logger.debug('build without %s: srpm %s',
                    sep_print(combination, ', '), 'passed' if not combination in breaking else 'failed')

        try:
            chroot.build_rpms(srpm, resultdir)
        except MockError:
            breaking.add(combination)
            continue
        finally:
            logger.debug('build without %s: rpm %s',
                    sep_print(combination, ', '), 'passed' if not combination in breaking else 'failed')

        if not rpm_cmp_dir(workdir, resultdir):
            breaking.add(combination)

    unneeded = filter(lambda x: not x in breaking, powerset(spec.buildrequires))
    # get biggest supersets
    return (f for f in unneeded if not any(f < g for g in unneeded))


def parse_args(args):
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('srpm', help='the srpm to scan for possibly unneeded BuildRequires')
    parser.add_argument('--root', '-r', help='use the specified chroot configuration as defined in /etc/mock/<chroot>.cfg', dest='root', metavar='chroot')
    parser.add_argument('--no-clean', '-c', help="don't remove temporary directories",
                        dest='clean', action='store_false', default=True)
    parser.add_argument('--reproduce-only', '-d', help="only test if the build is reproducible, don't drop any BuildRequires",
                        dest='reproduce', action='store_true', default=False)
    parser.add_argument('--loglvl', '-l',
                        help='set log verbosity',
                        choices=('debug', 'info', 'warning', 'error', 'critical'),
                        default='info', metavar='lvl')
    return parser.parse_args(args)


def main(mainargs):
    args = parse_args(mainargs)

    logging.basicConfig(format='%(levelname)s: %(message)s', level=getattr(logging, args.loglvl.upper()))
    srpm = Srpm(args.srpm)

    workdir = tempfile.mkdtemp(prefix='buildreq-check')

    try:
        srpm.extract(workdir)
        specs = glob.glob(workdir + '/*.spec')
        # from mock/py/mockbuild/backend.py:
        # if there's more than one then someone is an idiot
        try:
            spec = Spec(specs[0], workdir)
        except IndexError:
            raise Exception('Can\'t find spec file. Is this a srpm?')

        with Chroot(root=args.root, postfix=os.path.basename(srpm.name)) as chroot:
            # here we update our yum cache. It will stay the same for the remainder of the run
            logger.info('building reference rpm')
            chroot.build_rpms(srpm, workdir, yum_update=True)

            reprodir = os.path.join(workdir, 'buildreq-check-reproducible')
            logger.info('building another reference rpm to check if the build is reproducible')
            chroot.build_rpms(srpm, reprodir)
            if not rpm_cmp_dir(workdir, reprodir):
                raise Exception('built two different reference rpms. This should never happen!', srpm.name)
            if args.reproduce:
                sys.exit()

            unneeded = find_unneeded_buildreqs(chroot, spec, workdir)

        for s in unneeded:
            sys.stdout.write(srpm.name + ':')
            _ = map(sys.stdout.write, joinit(s, ', '))

    finally:
        if args.clean:
            shutil.rmtree(workdir)
        else:
            print('Temporary files are in', workdir)


if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except Exception as e:
        logger.error(sep_print(map(str, e.args), ', '))
        sys.exit(1)


# vim: sta:et:ai:si:ts=4:sw=4:sts=4
